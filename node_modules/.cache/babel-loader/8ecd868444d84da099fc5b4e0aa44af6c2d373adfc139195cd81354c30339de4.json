{"ast":null,"code":"var _jsxFileName = \"V:\\\\Job-Listing-Portal\\\\job-listing-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useLocation } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Navbar from './components/Navbar/Navbar';\nimport SearchAndSort from './components/SearchAndSort/SearchAndSort';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport JobListing from './components/JobListing/JobListing';\nimport AddJobDetails from '../src/components/AddJobDescription/'; // Import Add Job Page\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Check if user is logged in when the app loads\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConditionalNavbar, {\n        isLoggedIn: isLoggedIn,\n        setIsLoggedIn: setIsLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {\n            setIsLoggedIn: setIsLoggedIn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/register\",\n          element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/add-job\",\n          element: /*#__PURE__*/_jsxDEV(AddJobDetails, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchAndSort, {\n        isLoggedIn: isLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(JobListing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom component to conditionally render Navbar\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = App;\nconst ConditionalNavbar = ({\n  isLoggedIn,\n  setIsLoggedIn\n}) => {\n  _s2();\n  const location = useLocation();\n\n  // Hide Navbar on Login, Register, and Add Job pages\n  if ([\"/login\", \"/register\", \"/add-job\"].includes(location.pathname)) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Navbar, {\n    isLoggedIn: isLoggedIn,\n    setIsLoggedIn: setIsLoggedIn\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n};\n_s2(ConditionalNavbar, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c2 = ConditionalNavbar;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ConditionalNavbar\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useLocation","Home","Login","Register","Navbar","SearchAndSort","ToastContainer","JobListing","AddJobDetails","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isLoggedIn","setIsLoggedIn","token","localStorage","getItem","children","fileName","_jsxFileName","lineNumber","columnNumber","ConditionalNavbar","path","element","_c","_s2","location","includes","pathname","_c2","$RefreshReg$"],"sources":["V:/Job-Listing-Portal/job-listing-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useLocation } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Navbar from './components/Navbar/Navbar';\nimport SearchAndSort from './components/SearchAndSort/SearchAndSort';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport JobListing from './components/JobListing/JobListing';\nimport AddJobDetails from '../src/components/AddJobDescription/'; // Import Add Job Page\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Check if user is logged in when the app loads\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  return (\n    <Router>\n      <>\n        <ToastContainer />\n        <ConditionalNavbar isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />\n\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/login\" element={<Login setIsLoggedIn={setIsLoggedIn} />} />\n          <Route path=\"/register\" element={<Register />} />\n          <Route path=\"/add-job\" element={<AddJobDetails />} /> {/* Add Job Page (No Navbar) */}\n        </Routes>\n\n        <SearchAndSort isLoggedIn={isLoggedIn} />\n        <JobListing />\n      </>\n    </Router>\n  );\n}\n\n// Custom component to conditionally render Navbar\nconst ConditionalNavbar = ({ isLoggedIn, setIsLoggedIn }) => {\n  const location = useLocation();\n\n  // Hide Navbar on Login, Register, and Add Job pages\n  if ([\"/login\", \"/register\", \"/add-job\"].includes(location.pathname)) {\n    return null;\n  }\n\n  return <Navbar isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}