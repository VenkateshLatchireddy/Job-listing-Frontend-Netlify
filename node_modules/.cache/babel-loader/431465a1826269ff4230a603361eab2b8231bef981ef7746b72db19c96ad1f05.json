{"ast":null,"code":"var _jsxFileName = \"V:\\\\Job-Listing-Portal\\\\job-listing-frontend\\\\src\\\\components\\\\JobListing\\\\JobListing.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport JobCard from '../JobCard/JobCard'; // Import JobCard component\nimport axios from 'axios'; // Import axios to make API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobListing = () => {\n  _s();\n  const [jobs, setJobs] = useState([]); // State to store jobs\n\n  useEffect(() => {\n    // Fetch job listings from backend when the component mounts\n    const fetchJobs = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/jobs'); // Make GET request to fetch jobs\n        setJobs(response.data); // Store the fetched job data in state\n      } catch (error) {\n        console.error(\"Error fetching jobs:\", error); // Handle any errors during the fetch\n      }\n    };\n    fetchJobs(); // Call the fetch function\n  }, []); // Empty dependency array ensures this runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Job Listings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), jobs.length > 0 ?\n    // Map over the jobs array and display each job using the JobCard component\n    jobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n      companyName: job.companyName,\n      role: job.jobPosition,\n      salary: job.salary,\n      country: job.location,\n      workType: job.jobType,\n      jobType: job.remote ? \"Remote\" : \"On-Site\" // Display remote or on-site\n      ,\n      skills: job.skillsRequired ? job.skillsRequired.split(',') : [] // Split skills if they're comma-separated\n    }, job.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this)) :\n    /*#__PURE__*/\n    // If there are no jobs, display a message\n    _jsxDEV(\"p\", {\n      children: \"No jobs available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(JobListing, \"Q0mbvptFv5mszAZqWDb/1cpBDtw=\");\n_c = JobListing;\nexport default JobListing;\nvar _c;\n$RefreshReg$(_c, \"JobListing\");","map":{"version":3,"names":["React","useEffect","useState","JobCard","axios","jsxDEV","_jsxDEV","JobListing","_s","jobs","setJobs","fetchJobs","response","get","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","job","companyName","role","jobPosition","salary","country","location","workType","jobType","remote","skills","skillsRequired","split","id","_c","$RefreshReg$"],"sources":["V:/Job-Listing-Portal/job-listing-frontend/src/components/JobListing/JobListing.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport JobCard from '../JobCard/JobCard'; // Import JobCard component\r\nimport axios from 'axios'; // Import axios to make API calls\r\n\r\nconst JobListing = () => {\r\n  const [jobs, setJobs] = useState([]); // State to store jobs\r\n\r\n  useEffect(() => {\r\n    // Fetch job listings from backend when the component mounts\r\n    const fetchJobs = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/jobs'); // Make GET request to fetch jobs\r\n        setJobs(response.data); // Store the fetched job data in state\r\n      } catch (error) {\r\n        console.error(\"Error fetching jobs:\", error); // Handle any errors during the fetch\r\n      }\r\n    };\r\n\r\n    fetchJobs(); // Call the fetch function\r\n  }, []); // Empty dependency array ensures this runs only once when the component mounts\r\n\r\n  return (\r\n    <div>\r\n      <h2>Job Listings</h2>\r\n      {jobs.length > 0 ? (\r\n        // Map over the jobs array and display each job using the JobCard component\r\n        jobs.map((job) => (\r\n          <JobCard\r\n            key={job.id}\r\n            companyName={job.companyName}\r\n            role={job.jobPosition}\r\n            salary={job.salary}\r\n            country={job.location}\r\n            workType={job.jobType}\r\n            jobType={job.remote ? \"Remote\" : \"On-Site\"} // Display remote or on-site\r\n            skills={job.skillsRequired ? job.skillsRequired.split(',') : []} // Split skills if they're comma-separated\r\n          />\r\n        ))\r\n      ) : (\r\n        // If there are no jobs, display a message\r\n        <p>No jobs available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobListing;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,oBAAoB,CAAC,CAAC;AAC1C,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACpEH,OAAO,CAACE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC,CAAC;MAChD;IACF,CAAC;IAEDJ,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBZ,IAAI,CAACa,MAAM,GAAG,CAAC;IACd;IACAb,IAAI,CAACc,GAAG,CAAEC,GAAG,iBACXlB,OAAA,CAACH,OAAO;MAENsB,WAAW,EAAED,GAAG,CAACC,WAAY;MAC7BC,IAAI,EAAEF,GAAG,CAACG,WAAY;MACtBC,MAAM,EAAEJ,GAAG,CAACI,MAAO;MACnBC,OAAO,EAAEL,GAAG,CAACM,QAAS;MACtBC,QAAQ,EAAEP,GAAG,CAACQ,OAAQ;MACtBA,OAAO,EAAER,GAAG,CAACS,MAAM,GAAG,QAAQ,GAAG,SAAU,CAAC;MAAA;MAC5CC,MAAM,EAAEV,GAAG,CAACW,cAAc,GAAGX,GAAG,CAACW,cAAc,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAG,CAAC;IAAA,GAP5DZ,GAAG,CAACa,EAAE;MAAAnB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQZ,CACF,CAAC;IAAA;IAEF;IACAf,OAAA;MAAAW,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACb,EAAA,CAxCID,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AA0ChB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}