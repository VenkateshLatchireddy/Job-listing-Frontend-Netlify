{"ast":null,"code":"const express = require('express');\nconst {\n  Job\n} = require('../models'); // Ensure Job model is correctly imported\nconst {\n  jobValidation\n} = require('../middleware/validation');\nconst auth = require('../middleware/auth');\nconst {\n  validationResult\n} = require('express-validator');\nconst router = express.Router();\n\n// POST route to create a job\nrouter.post('/jobs', [auth, jobValidation], async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n  const {\n    companyName,\n    companyLogo,\n    // New field for logo\n    jobPosition,\n    jobDescription,\n    location,\n    monthlySalary,\n    // Updated field to monthlySalary\n    jobType,\n    remote_office,\n    // Updated field name\n    skillsRequired,\n    userId\n  } = req.body;\n  try {\n    const newJob = await Job.create({\n      companyName,\n      companyLogo,\n      // Store the company logo in the database\n      jobPosition,\n      jobDescription,\n      location,\n      monthlySalary,\n      // Use monthlySalary here\n      jobType,\n      remote_office,\n      // Save remote_office instead of remote\n      skillsRequired,\n      userId: req.user.id // user from JWT token\n    });\n    res.json(newJob);\n  } catch (err) {\n    console.error(\"Error creating job:\", err.message); // Enhanced error message\n    res.status(500).send('Server error');\n  }\n});\n\n// GET route to fetch all jobs\nrouter.get('/jobs', async (req, res) => {\n  try {\n    console.log(\"Fetching jobs...\");\n    const jobs = await Job.findAll(); // Get all jobs from DB\n    console.log(\"Jobs fetched:\", jobs);\n    res.json(jobs); // Ensure all the fields (including new ones) are returned\n  } catch (err) {\n    console.error(\"Error fetching jobs:\", err.message); // Log the error message\n    res.status(500).send('Server error');\n  }\n});\n\n// GET route to fetch a single job by ID\nrouter.get('/jobs/:id', async (req, res) => {\n  try {\n    const job = await Job.findByPk(req.params.id); // Find job by ID\n    if (!job) {\n      return res.status(404).json({\n        msg: 'Job not found'\n      }); // Handle case where job doesn't exist\n    }\n    res.json(job); // Return the full job object with all details\n  } catch (err) {\n    console.error(\"Error fetching job details:\", err.message); // Log error details\n    res.status(500).send('Server error');\n  }\n});\n\n// PUT route to update a job listing\nrouter.put('/jobs/:id', [auth, jobValidation], async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n  const {\n    companyName,\n    companyLogo,\n    // New field for logo\n    jobPosition,\n    jobDescription,\n    location,\n    monthlySalary,\n    // Updated field to monthlySalary\n    jobType,\n    remote_office,\n    // Updated field name\n    skillsRequired\n  } = req.body;\n  try {\n    const job = await Job.findByPk(req.params.id); // Find job by ID\n    if (!job || job.userId !== req.user.id) {\n      return res.status(404).json({\n        msg: 'Job not found or unauthorized'\n      }); // Unauthorized if user doesn't own the job\n    }\n\n    // Update the job with provided data (if any)\n    job.companyName = companyName || job.companyName;\n    job.companyLogo = companyLogo || job.companyLogo; // Update company logo\n    job.jobPosition = jobPosition || job.jobPosition;\n    job.jobDescription = jobDescription || job.jobDescription;\n    job.location = location || job.location;\n    job.monthlySalary = monthlySalary || job.monthlySalary; // Use monthlySalary here\n    job.jobType = jobType || job.jobType;\n    job.remote_office = remote_office || job.remote_office; // Update remote_office\n    job.skillsRequired = skillsRequired || job.skillsRequired;\n    await job.save(); // Save updated job data\n    res.json(job);\n  } catch (err) {\n    console.error(\"Error updating job:\", err.message); // Enhanced error message\n    res.status(500).send('Server error');\n  }\n});\n\n// DELETE route to delete a job\nrouter.delete('/jobs/:id', auth, async (req, res) => {\n  try {\n    const job = await Job.findByPk(req.params.id); // Find job by ID\n    if (!job || job.userId !== req.user.id) {\n      return res.status(404).json({\n        msg: 'Job not found or unauthorized'\n      }); // Unauthorized if user doesn't own the job\n    }\n    await job.destroy(); // Delete job from DB\n    res.json({\n      msg: 'Job deleted'\n    });\n  } catch (err) {\n    console.error(\"Error deleting job:\", err.message); // Enhanced error message\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","Job","jobValidation","auth","validationResult","router","Router","post","req","res","errors","isEmpty","status","json","array","companyName","companyLogo","jobPosition","jobDescription","location","monthlySalary","jobType","remote_office","skillsRequired","userId","body","newJob","create","user","id","err","console","error","message","send","get","log","jobs","findAll","job","findByPk","params","msg","put","save","delete","destroy","module","exports"],"sources":["V:/Job-Listing-Portal/job-listing-frontend/src/components/JobListing/JobListing.jsx"],"sourcesContent":["const express = require('express');\r\nconst { Job } = require('../models'); // Ensure Job model is correctly imported\r\nconst { jobValidation } = require('../middleware/validation');\r\nconst auth = require('../middleware/auth');\r\nconst { validationResult } = require('express-validator');\r\nconst router = express.Router();\r\n\r\n// POST route to create a job\r\nrouter.post('/jobs', [auth, jobValidation], async (req, res) => {\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(400).json({ errors: errors.array() });\r\n  }\r\n\r\n  const {\r\n    companyName,\r\n    companyLogo,           // New field for logo\r\n    jobPosition,\r\n    jobDescription,\r\n    location,\r\n    monthlySalary,        // Updated field to monthlySalary\r\n    jobType,\r\n    remote_office,         // Updated field name\r\n    skillsRequired,\r\n    userId,\r\n  } = req.body;\r\n\r\n  try {\r\n    const newJob = await Job.create({\r\n      companyName,\r\n      companyLogo,          // Store the company logo in the database\r\n      jobPosition,\r\n      jobDescription,\r\n      location,\r\n      monthlySalary,        // Use monthlySalary here\r\n      jobType,\r\n      remote_office,        // Save remote_office instead of remote\r\n      skillsRequired,\r\n      userId: req.user.id,  // user from JWT token\r\n    });\r\n\r\n    res.json(newJob);\r\n  } catch (err) {\r\n    console.error(\"Error creating job:\", err.message); // Enhanced error message\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// GET route to fetch all jobs\r\nrouter.get('/jobs', async (req, res) => {\r\n  try {\r\n    console.log(\"Fetching jobs...\");\r\n    const jobs = await Job.findAll(); // Get all jobs from DB\r\n    console.log(\"Jobs fetched:\", jobs);\r\n    res.json(jobs); // Ensure all the fields (including new ones) are returned\r\n  } catch (err) {\r\n    console.error(\"Error fetching jobs:\", err.message);  // Log the error message\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// GET route to fetch a single job by ID\r\nrouter.get('/jobs/:id', async (req, res) => {\r\n  try {\r\n    const job = await Job.findByPk(req.params.id); // Find job by ID\r\n    if (!job) {\r\n      return res.status(404).json({ msg: 'Job not found' }); // Handle case where job doesn't exist\r\n    }\r\n    res.json(job); // Return the full job object with all details\r\n  } catch (err) {\r\n    console.error(\"Error fetching job details:\", err.message); // Log error details\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// PUT route to update a job listing\r\nrouter.put('/jobs/:id', [auth, jobValidation], async (req, res) => {\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(400).json({ errors: errors.array() });\r\n  }\r\n\r\n  const {\r\n    companyName,\r\n    companyLogo,           // New field for logo\r\n    jobPosition,\r\n    jobDescription,\r\n    location,\r\n    monthlySalary,        // Updated field to monthlySalary\r\n    jobType,\r\n    remote_office,         // Updated field name\r\n    skillsRequired,\r\n  } = req.body;\r\n\r\n  try {\r\n    const job = await Job.findByPk(req.params.id); // Find job by ID\r\n    if (!job || job.userId !== req.user.id) {\r\n      return res.status(404).json({ msg: 'Job not found or unauthorized' }); // Unauthorized if user doesn't own the job\r\n    }\r\n\r\n    // Update the job with provided data (if any)\r\n    job.companyName = companyName || job.companyName;\r\n    job.companyLogo = companyLogo || job.companyLogo;  // Update company logo\r\n    job.jobPosition = jobPosition || job.jobPosition;\r\n    job.jobDescription = jobDescription || job.jobDescription;\r\n    job.location = location || job.location;\r\n    job.monthlySalary = monthlySalary || job.monthlySalary;  // Use monthlySalary here\r\n    job.jobType = jobType || job.jobType;\r\n    job.remote_office = remote_office || job.remote_office; // Update remote_office\r\n    job.skillsRequired = skillsRequired || job.skillsRequired;\r\n\r\n    await job.save(); // Save updated job data\r\n    res.json(job);\r\n  } catch (err) {\r\n    console.error(\"Error updating job:\", err.message); // Enhanced error message\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// DELETE route to delete a job\r\nrouter.delete('/jobs/:id', auth, async (req, res) => {\r\n  try {\r\n    const job = await Job.findByPk(req.params.id); // Find job by ID\r\n    if (!job || job.userId !== req.user.id) {\r\n      return res.status(404).json({ msg: 'Job not found or unauthorized' }); // Unauthorized if user doesn't own the job\r\n    }\r\n\r\n    await job.destroy(); // Delete job from DB\r\n    res.json({ msg: 'Job deleted' });\r\n  } catch (err) {\r\n    console.error(\"Error deleting job:\", err.message); // Enhanced error message\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}